import java.util.Arrays;

public class Main {

    // --- Merge Sort implementation ---
    public static void mergeSort(int[] arr) {
        if (arr.length < 2) {
            return;
        }
        int mid = arr.length / 2;
        int[] left = Arrays.copyOfRange(arr, 0, mid);
        int[] right = Arrays.copyOfRange(arr, mid, arr.length);

        mergeSort(left);
        mergeSort(right);
        merge(arr, left, right);
    }

    private static void merge(int[] arr, int[] left, int[] right) {
        int i = 0, j = 0, k = 0;
        while (i < left.length && j < right.length) {
            if (left[i] <= right[j]) {
                arr[k++] = left[i++];
            } else {
                arr[k++] = right[j++];
            }
        }
        while (i < left.length) {
            arr[k++] = left[i++];
        }
        while (j < right.length) {
            arr[k++] = right[j++];
        }
    }

    // --- Main method ---
    public static void main(String[] args) {
        long start = System.nanoTime();
        int[] numbers = { 38, 27, 43, 3, 9, 82, 10 };
        System.out.println("Original array: " + Arrays.toString(numbers));

        mergeSort(numbers);

        System.out.println("Sorted array:   " + Arrays.toString(numbers));
        long end = System.nanoTime();
        System.out.println("Czas wykonania: " + (end - start)/ 1_000_000.0 + " ms");
    }
}

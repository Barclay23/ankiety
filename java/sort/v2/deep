import java.util.Arrays;
import java.util.Random;

public class Main {

    // Bubble Sort Algorithm
    public static void bubbleSort(int[] arr) {
        int n = arr.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    // Swap elements
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
    }

    // Quick Sort Algorithm
    public static void quickSort(int[] arr) {
        quickSort(arr, 0, arr.length - 1);
    }

    private static void quickSort(int[] arr, int low, int high) {
        if (low < high) {
            int pi = partition(arr, low, high);
            quickSort(arr, low, pi - 1);
            quickSort(arr, pi + 1, high);
        }
    }

    private static int partition(int[] arr, int low, int high) {
        int pivot = arr[high];
        int i = (low - 1);

        for (int j = low; j < high; j++) {
            if (arr[j] <= pivot) {
                i++;
                // Swap elements
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }

        // Swap pivot to correct position
        int temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;

        return i + 1;
    }

    // Merge Sort Algorithm
    public static void mergeSort(int[] arr) {
        mergeSort(arr, 0, arr.length - 1);
    }

    private static void mergeSort(int[] arr, int left, int right) {
        if (left < right) {
            int mid = left + (right - left) / 2;

            mergeSort(arr, left, mid);
            mergeSort(arr, mid + 1, right);

            merge(arr, left, mid, right);
        }
    }

    private static void merge(int[] arr, int left, int mid, int right) {
        int n1 = mid - left + 1;
        int n2 = right - mid;

        int[] leftArr = new int[n1];
        int[] rightArr = new int[n2];

        // Copy data to temp arrays
        for (int i = 0; i < n1; i++) {
            leftArr[i] = arr[left + i];
        }
        for (int j = 0; j < n2; j++) {
            rightArr[j] = arr[mid + 1 + j];
        }

        // Merge the temp arrays
        int i = 0, j = 0, k = left;

        while (i < n1 && j < n2) {
            if (leftArr[i] <= rightArr[j]) {
                arr[k] = leftArr[i];
                i++;
            } else {
                arr[k] = rightArr[j];
                j++;
            }
            k++;
        }

        // Copy remaining elements
        while (i < n1) {
            arr[k] = leftArr[i];
            i++;
            k++;
        }

        while (j < n2) {
            arr[k] = rightArr[j];
            j++;
            k++;
        }
    }

    // Utility method to print array
    public static void printArray(int[] arr) {
        System.out.println(Arrays.toString(arr));
    }

    // Utility method to generate random array
    public static int[] generateRandomArray(int size) {
        Random rand = new Random();
        int[] arr = new int[size];
        for (int i = 0; i < size; i++) {
            arr[i] = rand.nextInt(100); // Random numbers between 0-99
        }
        return arr;
    }

    // Main method to test the sorting algorithms
    public static void main(String[] args) {
        long start = System.nanoTime();
        System.out.println("Sorting Algorithms Demo\n");

        // Test with a small array
        int[] testArray1 = {64, 34, 25, 12, 22, 11, 90};
        System.out.println("Original array: " + Arrays.toString(testArray1));

        // Test Bubble Sort
        int[] bubbleArray = testArray1.clone();
        bubbleSort(bubbleArray);
        System.out.println("Bubble Sort:    " + Arrays.toString(bubbleArray));

        // Test Quick Sort
        int[] quickArray = testArray1.clone();
        quickSort(quickArray);
        System.out.println("Quick Sort:     " + Arrays.toString(quickArray));

        // Test Merge Sort
        int[] mergeArray = testArray1.clone();
        mergeSort(mergeArray);
        System.out.println("Merge Sort:     " + Arrays.toString(mergeArray));

        System.out.println("\n" + "=".repeat(50) + "\n");

        // Test with larger random array
        int[] largeArray = generateRandomArray(15);
        System.out.println("Large random array: " + Arrays.toString(largeArray));

        int[] sortedLarge = largeArray.clone();
        quickSort(sortedLarge);
        System.out.println("Sorted large array: " + Arrays.toString(sortedLarge));

        System.out.println("\n" + "=".repeat(50) + "\n");

        // Performance comparison
        System.out.println("Performance Comparison with 1000 elements:");
        int[] perfArray = generateRandomArray(1000);

        // Bubble Sort (commented out for large arrays as it's slow)
        // long startTime = System.nanoTime();
        // bubbleSort(perfArray.clone());
        // long endTime = System.nanoTime();
        // System.out.println("Bubble Sort time: " + (endTime - startTime) / 1000000 + " ms");

        // Quick Sort
        long startTime = System.nanoTime();
        quickSort(perfArray.clone());
        long endTime = System.nanoTime();
        System.out.println("Quick Sort time:  " + (endTime - startTime) / 1000000 + " ms");

        // Merge Sort
        startTime = System.nanoTime();
        mergeSort(perfArray.clone());
        endTime = System.nanoTime();
        System.out.println("Merge Sort time:  " + (endTime - startTime) / 1000000 + " ms");

        // Built-in Arrays.sort()
        startTime = System.nanoTime();
        Arrays.sort(perfArray.clone());
        endTime = System.nanoTime();
        System.out.println("Arrays.sort() time: " + (endTime - startTime) / 1000000 + " ms");
        long end = System.nanoTime();
        System.out.println("Czas: " + (end - start) / 1_000_000.0 + " ms");
    }
}